ignore declines;
deny leasequery;
#deny unknown-clients;
ignore unknown-clients;
boot-unknown-clients off;
#lease-file-name  "/dev/null";
server-name "DHCP";

default-lease-time -1;
max-lease-time -1;
authoritative;
option arch-type code 93 = unsigned integer 16;

include "space.conf";

class "is-netboot" {
	match if exists arch-type and (not (option user-class="iPXE"));
}

class "is-ipxe" {
	match if option user-class="iPXE" and exists arch-type;
}


shared-network "world" {
	subnet 100.64.0.0 netmask 255.192.0.0 {
		next-server 100.200.200.200;
		# any speedup in boot process?
		#option PXE.discovery-control 8; 

		# for tests only 
		#option PXE.boot-menu 00:00:02:65:66:00:01:02:67:68;
		#option PXE.menu-prompt 255 "hello";

		class "x86_64 EFI" {
			match if  option arch-type = 00:07;
			# x86_64 EFI
			option bootfile-name = concat("/",binary-to-ascii (16, 8, "/",substring (hardware, 1, 6)),"/ipxe.efi");
		}
		class "x86_64 HTTPBoot" {
			match if option arch-type = 00:10;
			option vendor-class-identifier "HTTPClient";
			option bootfile-name "http://192.168.0.1/ipxe.efi";
		} 
		class "x86Bios" {
			match if option arch-type = 00:00;
			option bootfile-name = concat("/",binary-to-ascii (16, 8, "/",substring (hardware, 1, 6)),"/ipxe.pxe");
		}
	}
	subnet 0.0.0.0 netmask 0.0.0.0 {
		option domain-name-servers 1.1.1.1;
		# disable proxy DHCP option (speeds up iPXE lease acquisition)
		class "iPXE" {
			match if option user-class="iPXE";
				option ipxe.no-pxedhcp 1;
		}
		#option vendor-class-identifier "WORLD";
	}
}

host O000c290e741d  {
        hardware ethernet 00:0c:29:0e:74:1d;
        fixed-address 10.255.255.11;
        option routers 10.255.255.10;
        if option vendor-class-identifier="MSFT 5.0" {
                option subnet-mask 255.255.255.255;
        } else {
                option subnet-mask 255.255.255.254;
        }
}

host N000c290e741d {
	match if "is-netboot";
        hardware ethernet 00:0c:29:0e:74:1d;
        fixed-address 100.120.120.2;
        option routers 100.120.120.1;
        option subnet-mask 255.255.255.252;
}

host O0050563caffe {
        hardware ethernet 00:50:56:3c:af:fe;
        fixed-address 10.255.255.14;
        option routers 10.255.255.13;
        option subnet-mask 255.255.255.252;
}

host N0050563caffe {
	match if "is-netboot";
        hardware ethernet 00:50:56:3c:af:fe;
        fixed-address 100.120.120.14;
        option routers 100.120.120.13;
        option subnet-mask 255.255.255.252;
}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
